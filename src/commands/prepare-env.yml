description: >
  This command prepares the environment for testing or building an Unity project.

parameters:
  unity-username-var-name:
    type: env_var_name
    default: "UNITY_USERNAME"
    description: |
      Enter the name of the environment variable containing your Unity username.
  unity-password-var-name:
    type: env_var_name
    default: "UNITY_PASSWORD"
    description: |
      Enter the name of the environment variable containing your Unity password.
  unity-serial-var-name:
    type: env_var_name
    default: "UNITY_SERIAL"
    description: |
      Enter the name of the environment variable containing your Unity serial number.
      Required if you have a Plus or Pro license.
  unity-license-var-name:
    type: env_var_name
    default: "UNITY_ENCODED_LICENSE"
    description: |
      Enter the name of the environment variable containing your Unity license file encoded in base64.
      Required if you have a Personal license.
  git-private-token-var-name:
    type: env_var_name
    default: "GIT_PRIVATE_TOKEN"
    description: |
      Enter your Github PAT that you want to pass to the credential manager
  build-target:
    type: string
    default: ""
    description: |
      The target platform of your build.
      Accepted arguments vary with Unity's version and can be found in the docs: https://docs.unity3d.com/2021.2/Documentation/ScriptReference/BuildTarget.html
  cache-version:
    type: string
    default: "v1"
    description: |
      Change the default cache version if you need to clear the cache for any reason.
  include-branch-in-cache-key:
      type: boolean
      default: true
      description: >
          If true, this cache bucket will only apply to jobs within the same branch.
  project-path:
    type: string
    default: "."
    description: |
      Enter the path of your Unity project.
      This should be the directory that has an "Assets" folder inside it.
  no_output_timeout:
    type: string
    default: "10m"
    description: Elapsed time the command can run without output.

steps:
  - restore_cache:
      keys:
        - unity-deps-{{ arch }}-<< parameters.cache-version >>-<<# parameters.include-branch-in-cache-key >>{{ .Branch }}-<</ parameters.include-branch-in-cache-key >>{{ checksum "<< parameters.project-path >>/Packages/packages-lock.json" }}
        - unity-deps-{{ arch }}-<< parameters.cache-version >>-<<# parameters.include-branch-in-cache-key >>{{ .Branch }}<</ parameters.include-branch-in-cache-key >>
  - run:
      command: |
        echo "this is prepare-env"
        echo << parameters.build-target >>
  - run:
      name: Prepare the environment
      no_output_timeout: << parameters.no_output_timeout >>
      environment:
        PARAM_UNITY_USERNAME_VAR_NAME: << parameters.unity-username-var-name >>
        PARAM_UNITY_PASSWORD_VAR_NAME: << parameters.unity-password-var-name >>
        PARAM_UNITY_SERIAL_VAR_NAME: << parameters.unity-serial-var-name >>
        PARAM_UNITY_LICENSE_VAR_NAME: << parameters.unity-license-var-name >>
        PARAM_BUILD_TARGET: << parameters.build-target >>
        PARAM_PROJECT_PATH: << parameters.project-path >>
        SCRIPT_PREPARE_ENV_LINUX: << include(scripts/linux/prepare-env.sh) >>
        SCRIPT_PREPARE_ENV_WINDOWS: << include(scripts/windows/prepare-env.sh) >>
        SCRIPT_PREPARE_ENV_MACOS: << include(scripts/macos/prepare-env.sh) >>
        SCRIPT_UTILS: << include(scripts/utils.sh) >>
      command: << include(scripts/prepare-env.sh) >>
  - run:
      name: Set Git Credentials
      no_output_timeout: << parameters.no_output_timeout >>
      environment:
        PARAM_GIT_PRIVATE_TOKEN: << parameters.git-private-token-var-name >>
        PARAM_PROJECT_PATH: << parameters.project-path >>
        SCRIPT_UTILS: << include(scripts/utils.sh) >>
        SCRIPT_GIT_CREDENTIAL_LINUX: << include(scripts/linux/set-gitcredential.sh) >>
        SCRIPT_GIT_CREDENTIAL_WINDOWS: << include(scripts/windows/set-gitcredential.sh) >>
        SCRIPT_GIT_CREDENTIAL_MACOS: << include(scripts/macos/set-gitcredential.sh) >>
      command: << include(scripts/set-gitcredential.sh) >>
